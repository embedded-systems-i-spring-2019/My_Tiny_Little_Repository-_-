


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

--declare entity
entity debounce is
  Port (clk: in std_logic;
        btn: in std_logic;
        dbnc: out std_logic );
end debounce;

architecture DB of debounce is


--use 26 bits to be able to count to 6.25 million 
  signal counter: std_logic_vector (25 downto 0) := (others => '0');
  --create 2 bit long shift register
  signal sft_Reg: std_logic_vector(1 downto 0);
begin


--declare process  
  process(clk, btn) begin
  --check on rising edge
    if rising_edge(clk) then
    --bit 1 gets value from bit 0
    -- Remember that the bit positions are not given integer values. They are given the values of the bit position next to it
    sft_Reg(1) <= sft_Reg(0);
    --bit 0 gets value from button
    sft_Reg(0) <= btn;    --Here is where pressing the button (1) will make a difference. By making the shift register change its "0" value 
                          --Althought the button is not "held" pressing for 50ms will generate 6.25 million counts. So a "1" will change
                          --positions within the 2 shift register 6.25 million times, because button "1" will always be during 6.25 million counts
    --need to count to 6.25 million
    --at the sample rate of 125MHZ, using this number of counts will give 50ms debounce time
    --The counter starts counting every rising edge, and as long as it detects a button input of "1" 
        if(unsigned(counter) < 6250000) then --sherif said to use 50ms. This is only possible because we have a 125Mhz clock. So the numbers of counts we give it 
                                             --will determine the total time the circuit will debounce.
                                             
                                             --For example if we get a "1" signal that was caused by interference within the 50ms, but not long enough that it 
                                             --lasts the entire 50ms, so the counter will not count for the entire 50ms. 
                                             --Remember the counter and the 50ms time are equivalent
                                            
        --while less than 6.25 million output 0. This is within the period where the oscillation button interferance is happening, and the high signal dissapered before the 6.25 million count
       --This gives a debounce output of "0" if the debounce simply thought that the "high" btn was just interference. 
       
        dbnc <= '0'; --as long as the signal is oscillating the output wont be counted
           if(sft_Reg(1) = '1' ) then 
           --if bit 1 is high, add to counter
            counter <= std_logic_vector( unsigned(counter) + 1 ); --the counter counts depending on the shift register
            else
            --reset counter
            counter <= (others => '0'); --This is if the button becomes a "0" in any of the 8.0ns ticks 
            end if;
        else
        -- This is if all the clock ticks recorded an button input of "1" for all 6.25 million counts
        dbnc <= '1'; --The button register a high output, once the oscillation stops
        --once the button is released, reset the output and counter. 
        --Remember that the "btn" (button) is not the output of the debouncer, but it is the actual value of the button
        
        --!!!!!Remember that the button may still be oscilating so for the debounce circuit to generate a "0" it would have to 
        --detect a "0" at any count for the debounce to give an output of "0"
        --This is the debounce giving an output of "0" after the debounce detected a corrent and sufficient period for a "high btn"
        
            if(btn = '0') then
               dbnc <= '0';
               counter <= (others => '0'); --This is the part that resets the counter
           --Remember that this works differently than a "1" btn output. This is because the "1" output of the button
           --must occur 62.5 million times for the debounce output to finally give a "1". Whereas for the debounce to give an
           --output of "0" it must detect a "0" from the btn at any point in time
           
            end if;   
        end if;
      end if;
  end process;

end DB;
